// Generated by js_of_ocaml
//# buildInfo:effects=false, kind=cma, use-js-string=true, version=5.4.0

//# unitInfo: Provides: Definicije
(function
  (globalThis){
   "use strict";
   var runtime = globalThis.jsoo_runtime, Definicije = [0];
   runtime.caml_register_global(0, Definicije, "Definicije");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Definicije__Stanje
(function(globalThis){
   "use strict";
   var runtime = globalThis.jsoo_runtime;
   function iz_niza(oznaka){return [0, oznaka];}
   function v_niz(param){var oznaka = param[1]; return oznaka;}
   var Definicije_Stanje = [0, iz_niza, v_niz];
   runtime.caml_register_global(0, Definicije_Stanje, "Definicije__Stanje");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Definicije__Avtomat
//# unitInfo: Requires: Definicije__Stanje, Stdlib__list, Stdlib__seq, Stdlib__string
(function
  (globalThis){
   "use strict";
   var runtime = globalThis.jsoo_runtime;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) == 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   function caml_call3(f, a0, a1, a2){
    return (f.l >= 0 ? f.l : f.l = f.length) == 3
            ? f(a0, a1, a2)
            : runtime.caml_call_gen(f, [a0, a1, a2]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    Stdlib_string = global_data.Stdlib__string,
    Stdlib_seq = global_data.Stdlib__seq,
    Stdlib_list = global_data.Stdlib__list,
    Definicije_Stanje = global_data.Definicije__Stanje,
    cst_q0 = "q0",
    cst_q1 = "q1",
    cst_q2 = "q2";
   function prazen_avtomat(zacetno_stanje){
    return [0, [0, zacetno_stanje, 0], zacetno_stanje, 0, 0];
   }
   function dodaj_nesprejemno_stanje(stanje, avtomat){
    return [0, [0, stanje, avtomat[1]], avtomat[2], avtomat[3], avtomat[4]];
   }
   function dodaj_sprejemno_stanje(stanje, avtomat){
    return [0,
            [0, stanje, avtomat[1]],
            avtomat[2],
            [0, stanje, avtomat[3]],
            avtomat[4]];
   }
   function dodaj_prehod(stanje1, znak, stanje2, avtomat){
    return [0,
            avtomat[1],
            avtomat[2],
            avtomat[3],
            [0, [0, stanje1, znak, stanje2], avtomat[4]]];
   }
   function prehodna_funkcija(avtomat, stanje, znak){
    var _b_ = avtomat[4];
    function _c_(param){
     var
      znak$0 = param[2],
      stanje1 = param[1],
      _d_ = runtime.caml_equal(stanje1, stanje),
      _e_ = _d_ ? znak === znak$0 ? 1 : 0 : _d_;
     return _e_;
    }
    var match = caml_call2(Stdlib_list[37], _c_, _b_);
    if(! match) return 0;
    var stanje2 = match[1][3];
    return [0, stanje2];
   }
   function zacetno_stanje(avtomat){return avtomat[2];}
   function seznam_stanj(avtomat){return avtomat[1];}
   function seznam_prehodov(avtomat){return avtomat[4];}
   function je_sprejemno_stanje(avtomat, stanje){
    return caml_call2(Stdlib_list[34], stanje, avtomat[3]);
   }
   var
    q0 = caml_call1(Definicije_Stanje[1], cst_q0),
    q1 = caml_call1(Definicije_Stanje[1], cst_q1),
    q2 = caml_call1(Definicije_Stanje[1], cst_q2),
    enke_1mod3 =
      dodaj_prehod
       (q2,
        49,
        q0,
        dodaj_prehod
         (q1,
          49,
          q2,
          dodaj_prehod
           (q0,
            49,
            q1,
            dodaj_prehod
             (q2,
              48,
              q2,
              dodaj_prehod
               (q1,
                48,
                q1,
                dodaj_prehod
                 (q0,
                  48,
                  q0,
                  dodaj_nesprejemno_stanje
                   (q2, dodaj_sprejemno_stanje(q1, prazen_avtomat(q0)))))))));
   function preberi_niz(avtomat, q, niz){
    function aux(acc, znak){
     if(! acc) return 0;
     var q = acc[1];
     return prehodna_funkcija(avtomat, q, znak);
    }
    var _a_ = caml_call1(Stdlib_string[36], niz);
    return caml_call3(Stdlib_seq[9], aux, [0, q], _a_);
   }
   var
    Definicije_Avtomat =
      [0,
       prazen_avtomat,
       dodaj_nesprejemno_stanje,
       dodaj_sprejemno_stanje,
       dodaj_prehod,
       prehodna_funkcija,
       zacetno_stanje,
       seznam_stanj,
       seznam_prehodov,
       je_sprejemno_stanje,
       enke_1mod3,
       preberi_niz];
   runtime.caml_register_global(7, Definicije_Avtomat, "Definicije__Avtomat");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Definicije__Trak
//# unitInfo: Requires: Stdlib__string
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    caml_ml_string_length = runtime.caml_ml_string_length;
   function caml_call3(f, a0, a1, a2){
    return (f.l >= 0 ? f.l : f.l = f.length) == 3
            ? f(a0, a1, a2)
            : runtime.caml_call_gen(f, [a0, a1, a2]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    cst = "",
    Stdlib_string = global_data.Stdlib__string;
   function trenutni_znak(trak){
    return runtime.caml_string_get(trak[1], trak[2]);
   }
   function je_na_koncu(trak){
    return caml_ml_string_length(trak[1]) === trak[2] ? 1 : 0;
   }
   function premakni_naprej(trak){return [0, trak[1], trak[2] + 1 | 0];}
   function iz_niza(niz){return [0, niz, 0];}
   var prazen = iz_niza(cst);
   function v_niz(trak){return trak[1];}
   function prebrani(trak){
    return caml_call3(Stdlib_string[4], trak[1], 0, trak[2]);
   }
   function neprebrani(trak){
    return caml_call3
            (Stdlib_string[4],
             trak[1],
             trak[2],
             caml_ml_string_length(trak[1]) - trak[2] | 0);
   }
   var
    Definicije_Trak =
      [0,
       prazen,
       trenutni_znak,
       je_na_koncu,
       premakni_naprej,
       iz_niza,
       v_niz,
       prebrani,
       neprebrani];
   runtime.caml_register_global(2, Definicije_Trak, "Definicije__Trak");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Definicije__ZagnaniAvtomat
//# unitInfo: Requires: Definicije__Avtomat, Definicije__Trak
(function
  (globalThis){
   "use strict";
   var runtime = globalThis.jsoo_runtime;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) == 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   function caml_call3(f, a0, a1, a2){
    return (f.l >= 0 ? f.l : f.l = f.length) == 3
            ? f(a0, a1, a2)
            : runtime.caml_call_gen(f, [a0, a1, a2]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    Definicije_Avtomat = global_data.Definicije__Avtomat,
    Definicije_Trak = global_data.Definicije__Trak;
   function pozeni(avtomat, trak){
    return [0, avtomat, trak, caml_call1(Definicije_Avtomat[6], avtomat)];
   }
   function avtomat(param){var avtomat = param[1]; return avtomat;}
   function trak(param){var trak = param[2]; return trak;}
   function stanje(param){var stanje = param[3]; return stanje;}
   function korak_naprej(param){
    var stanje = param[3], trak = param[2], avtomat = param[1];
    if(caml_call1(Definicije_Trak[3], trak)) return 0;
    var
     _a_ = caml_call1(Definicije_Trak[2], trak),
     stanje$0 = caml_call3(Definicije_Avtomat[5], avtomat, stanje, _a_);
    if(! stanje$0) return 0;
    var stanje$1 = stanje$0[1];
    return [0, [0, avtomat, caml_call1(Definicije_Trak[4], trak), stanje$1]];
   }
   function je_v_sprejemnem_stanju(param){
    var stanje = param[3], avtomat = param[1];
    return caml_call2(Definicije_Avtomat[9], avtomat, stanje);
   }
   var
    Definicije_ZagnaniAvtomat =
      [0, pozeni, avtomat, trak, stanje, korak_naprej, je_v_sprejemnem_stanju];
   runtime.caml_register_global
    (2, Definicije_ZagnaniAvtomat, "Definicije__ZagnaniAvtomat");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Definicije__Grid
//# unitInfo: Requires: Stdlib__array
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    caml_check_bound = runtime.caml_check_bound,
    caml_mod = runtime.caml_mod;
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) == 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    Stdlib_array = global_data.Stdlib__array;
   function init(width, height, init_cell){
    function _f_(param){
     function _g_(param){return init_cell;}
     return caml_call2(Stdlib_array[2], width, _g_);
    }
    return caml_call2(Stdlib_array[2], height, _f_);
   }
   function get_cell(grid, x, y){
    return caml_check_bound(caml_check_bound(grid, y)[1 + y], x)[1 + x];
   }
   function set_cell(grid, x, y, cell){
    caml_check_bound(caml_check_bound(grid, y)[1 + y], x)[1 + x] = cell;
    return 0;
   }
   function get_neighbors(grid, x, y){
    var
     height = grid.length - 1,
     width = caml_check_bound(grid, 0)[1].length - 1,
     neighbors = [0, 0],
     dx = -1;
    a:
    for(;;){
     var dy = -1;
     for(;;){
      var _b_ = 0 !== dx ? 1 : 0, _c_ = _b_ || (0 !== dy ? 1 : 0);
      if(_c_){
       var
        nx = caml_mod((x + dx | 0) + width | 0, width),
        ny = caml_mod((y + dy | 0) + height | 0, height),
        _d_ = neighbors[1];
       neighbors[1] =
        [0,
         caml_check_bound(caml_check_bound(grid, ny)[1 + ny], nx)[1 + nx],
         _d_];
      }
      var _e_ = dy + 1 | 0;
      if(1 !== dy){var dy = _e_; continue;}
      var _a_ = dx + 1 | 0;
      if(1 === dx) return neighbors[1];
      var dx = _a_;
      continue a;
     }
    }
   }
   function height(grid){return grid.length - 1;}
   function width(grid){return caml_check_bound(grid, 0)[1].length - 1;}
   var
    Definicije_Grid =
      [0, init, get_cell, set_cell, get_neighbors, height, width];
   runtime.caml_register_global(1, Definicije_Grid, "Definicije__Grid");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Definicije__CellularAutomaton
//# unitInfo: Requires: Definicije__Grid
(function
  (globalThis){
   "use strict";
   var runtime = globalThis.jsoo_runtime;
   function caml_call3(f, a0, a1, a2){
    return (f.l >= 0 ? f.l : f.l = f.length) == 3
            ? f(a0, a1, a2)
            : runtime.caml_call_gen(f, [a0, a1, a2]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    Definicije_Grid = global_data.Definicije__Grid;
   function init(grid, update_rule){return [0, grid, update_rule];}
   function get_grid(t){return t[1];}
   function get_update_rule(t){return t[2];}
   function set_grid(t, new_grid){return [0, new_grid, t[2]];}
   function empty_nca(width, height, init_state, update_rule){
    var grid = caml_call3(Definicije_Grid[1], width, height, init_state);
    return [0, grid, update_rule];
   }
   var
    Definicije_CellularAutomaton =
      [0, init, get_grid, set_grid, get_update_rule, empty_nca];
   runtime.caml_register_global
    (1, Definicije_CellularAutomaton, "Definicije__CellularAutomaton");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Definicije__NcaRunner
//# unitInfo: Requires: Definicije__CellularAutomaton, Definicije__Grid
(function
  (globalThis){
   "use strict";
   var runtime = globalThis.jsoo_runtime;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) == 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   function caml_call3(f, a0, a1, a2){
    return (f.l >= 0 ? f.l : f.l = f.length) == 3
            ? f(a0, a1, a2)
            : runtime.caml_call_gen(f, [a0, a1, a2]);
   }
   function caml_call4(f, a0, a1, a2, a3){
    return (f.l >= 0 ? f.l : f.l = f.length) == 4
            ? f(a0, a1, a2, a3)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    Definicije_CellularAutomaton = global_data.Definicije__CellularAutomaton,
    Definicije_Grid = global_data.Definicije__Grid;
   function init(nca){return [0, nca, 0];}
   function step(t){
    var
     grid = caml_call1(Definicije_CellularAutomaton[2], t[1]),
     height = caml_call1(Definicije_Grid[5], grid),
     width = caml_call1(Definicije_Grid[6], grid),
     rule = caml_call1(Definicije_CellularAutomaton[4], t[1]),
     _a_ = caml_call3(Definicije_Grid[2], grid, 0, 0),
     new_grid = caml_call3(Definicije_Grid[1], width, height, _a_),
     _c_ = height - 1 | 0,
     _b_ = 0;
    if(_c_ >= 0){
     var y = _b_;
     for(;;){
      var _e_ = width - 1 | 0, _d_ = 0;
      if(_e_ >= 0){
       var x = _d_;
       for(;;){
        var
         cell = caml_call3(Definicije_Grid[2], grid, x, y),
         neighbors = caml_call3(Definicije_Grid[4], grid, x, y),
         new_cell = caml_call2(rule, cell, neighbors);
        caml_call4(Definicije_Grid[3], new_grid, x, y, new_cell);
        var _g_ = x + 1 | 0;
        if(_e_ !== x){var x = _g_; continue;}
        break;
       }
      }
      var _f_ = y + 1 | 0;
      if(_c_ !== y){var y = _f_; continue;}
      break;
     }
    }
    var
     updated_nca = caml_call2(Definicije_CellularAutomaton[3], t[1], new_grid);
    return [0, updated_nca, t[2] + 1 | 0];
   }
   function run(t, steps){
    var n = steps, t$0 = t;
    for(;;){
     if(0 >= n) return t$0;
     var t$1 = step(t$0), n$0 = n - 1 | 0, n = n$0, t$0 = t$1;
    }
   }
   function get_grid(t){
    return caml_call1(Definicije_CellularAutomaton[2], t[1]);
   }
   function get_nca(t){return t[1];}
   function set_nca(t, new_nca){return [0, new_nca, t[2]];}
   var
    Definicije_NcaRunner = [0, init, step, run, get_grid, get_nca, set_nca];
   runtime.caml_register_global
    (2, Definicije_NcaRunner, "Definicije__NcaRunner");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Definicije__Cell
(function(globalThis){
   "use strict";
   var runtime = globalThis.jsoo_runtime;
   function init(rgb, alpha, hidden){return [0, rgb, alpha, hidden];}
   function get_rgb(cell){return cell[1];}
   function get_alpha(cell){return cell[2];}
   function get_hidden(cell){return cell[3];}
   function set_rgb(rgb, cell){return [0, rgb, cell[2], cell[3]];}
   function set_alpha(alpha, cell){return [0, cell[1], alpha, cell[3]];}
   function set_hidden(hidden, cell){return [0, cell[1], cell[2], hidden];}
   var
    Definicije_Cell =
      [0,
       init,
       get_rgb,
       get_alpha,
       get_hidden,
       set_rgb,
       set_alpha,
       set_hidden];
   runtime.caml_register_global(0, Definicije_Cell, "Definicije__Cell");
   return;
  }
  (globalThis));

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLjAsImZpbGUiOiIuZGVmaW5pY2lqZS5vYmpzL2pzb28vZGVmYXVsdC9kZWZpbmljaWplLmNtYS5qcyIsInNvdXJjZVJvb3QiOiIiLCJuYW1lcyI6WyJpel9uaXphIiwib3puYWthIiwidl9uaXoiLCJwcmF6ZW5fYXZ0b21hdCIsInphY2V0bm9fc3RhbmplIiwiZG9kYWpfbmVzcHJlamVtbm9fc3RhbmplIiwic3RhbmplIiwiYXZ0b21hdCIsImRvZGFqX3NwcmVqZW1ub19zdGFuamUiLCJkb2Rhal9wcmVob2QiLCJzdGFuamUxIiwiem5hayIsInN0YW5qZTIiLCJwcmVob2RuYV9mdW5rY2lqYSIsInpuYWskMCIsInNlem5hbV9zdGFuaiIsInNlem5hbV9wcmVob2RvdiIsImplX3NwcmVqZW1ub19zdGFuamUiLCJxMCIsInExIiwicTIiLCJlbmtlXzFtb2QzIiwicHJlYmVyaV9uaXoiLCJxIiwibml6IiwiYXV4IiwiYWNjIiwidHJlbnV0bmlfem5hayIsInRyYWsiLCJqZV9uYV9rb25jdSIsInByZW1ha25pX25hcHJlaiIsInByYXplbiIsInByZWJyYW5pIiwibmVwcmVicmFuaSIsInBvemVuaSIsImtvcmFrX25hcHJlaiIsInN0YW5qZSQwIiwic3RhbmplJDEiLCJqZV92X3NwcmVqZW1uZW1fc3Rhbmp1IiwiaW5pdCIsIndpZHRoIiwiaGVpZ2h0IiwiaW5pdF9jZWxsIiwiZ2V0X2NlbGwiLCJncmlkIiwieCIsInkiLCJzZXRfY2VsbCIsImNlbGwiLCJnZXRfbmVpZ2hib3JzIiwibmVpZ2hib3JzIiwiZHgiLCJkeSIsIm54IiwibnkiLCJ1cGRhdGVfcnVsZSIsImdldF9ncmlkIiwidCIsImdldF91cGRhdGVfcnVsZSIsInNldF9ncmlkIiwibmV3X2dyaWQiLCJlbXB0eV9uY2EiLCJpbml0X3N0YXRlIiwibmNhIiwic3RlcCIsInJ1bGUiLCJuZXdfY2VsbCIsInVwZGF0ZWRfbmNhIiwicnVuIiwic3RlcHMiLCJuIiwidCQwIiwidCQxIiwibiQwIiwiZ2V0X25jYSIsInNldF9uY2EiLCJuZXdfbmNhIiwicmdiIiwiYWxwaGEiLCJoaWRkZW4iLCJnZXRfcmdiIiwiZ2V0X2FscGhhIiwiZ2V0X2hpZGRlbiIsInNldF9yZ2IiLCJzZXRfYWxwaGEiLCJzZXRfaGlkZGVuIl0sInNvdXJjZXMiOlsiL3dvcmtzcGFjZV9yb290L3NyYy9kZWZpbmljaWplL3N0YW5qZS5tbCIsIi93b3Jrc3BhY2Vfcm9vdC9zcmMvZGVmaW5pY2lqZS9hdnRvbWF0Lm1sIiwiL3dvcmtzcGFjZV9yb290L3NyYy9kZWZpbmljaWplL3RyYWsubWwiLCIvd29ya3NwYWNlX3Jvb3Qvc3JjL2RlZmluaWNpamUvemFnbmFuaUF2dG9tYXQubWwiLCIvd29ya3NwYWNlX3Jvb3Qvc3JjL2RlZmluaWNpamUvZ3JpZC5tbCIsIi93b3Jrc3BhY2Vfcm9vdC9zcmMvZGVmaW5pY2lqZS9jZWxsdWxhckF1dG9tYXRvbi5tbCIsIi93b3Jrc3BhY2Vfcm9vdC9zcmMvZGVmaW5pY2lqZS9uY2FSdW5uZXIubWwiLCIvd29ya3NwYWNlX3Jvb3Qvc3JjL2RlZmluaWNpamUvY2VsbC5tbCJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7OztFOzs7Ozs7O1lBRUlBLFFBQVFDLFFBQVMsV0FBVEEsUUFBbUI7WUFDM0JDLGlCQUFRRCxtQkFBVyxPQUFYQTsrQkFEUkQsU0FDQUU7OztFOzs7Ozs7Ozs7Rzs7Ozs7Rzs7Ozs7Rzs7Ozs7Ozs7Ozs7Ozs7WUNNQUMsZUFBZUM7SUFDakIsZUFEaUJBLG9CQUFBQTtHQU1oQjtZQUVDQyx5QkFBeUJDLFFBQU9DO0lBQ2xDLGVBRDJCRCxRQUFPQyxhQUFBQSxZQUFBQSxZQUFBQTtHQUNnQjtZQUVoREMsdUJBQXVCRixRQUFPQztJQUNoQztnQkFEeUJELFFBQU9DO1lBQUFBO2dCQUFQRCxRQUFPQztZQUFBQTtHQUsvQjtZQUVDRSxhQUFhQyxTQUFRQyxNQUFLQyxTQUFRTDtJQUNwQztZQURvQ0E7WUFBQUE7WUFBQUE7b0JBQXJCRyxTQUFRQyxNQUFLQyxVQUFRTDtHQUNrQztZQUVwRU0sa0JBQWtCTixTQUFRRCxRQUFP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QUM7T0FDQUM7T0FDQUM7OztFIiwic291cmNlc0NvbnRlbnQiOlsidHlwZSB0ID0geyBvem5ha2EgOiBzdHJpbmcgfVxuXG5sZXQgaXpfbml6YSBvem5ha2EgPSB7IG96bmFrYSB9XG5sZXQgdl9uaXogeyBvem5ha2EgfSA9IG96bmFrYVxuIiwidHlwZSBzdGFuamUgPSBTdGFuamUudFxuXG50eXBlIHQgPSB7XG4gIHN0YW5qYSA6IHN0YW5qZSBsaXN0O1xuICB6YWNldG5vX3N0YW5qZSA6IHN0YW5qZTtcbiAgc3ByZWplbW5hX3N0YW5qYSA6IHN0YW5qZSBsaXN0O1xuICBwcmVob2RpIDogKHN0YW5qZSAqIGNoYXIgKiBzdGFuamUpIGxpc3Q7XG59XG5cbmxldCBwcmF6ZW5fYXZ0b21hdCB6YWNldG5vX3N0YW5qZSA9XG4gIHtcbiAgICBzdGFuamEgPSBbIHphY2V0bm9fc3RhbmplIF07XG4gICAgemFjZXRub19zdGFuamU7XG4gICAgc3ByZWplbW5hX3N0YW5qYSA9IFtdO1xuICAgIHByZWhvZGkgPSBbXTtcbiAgfVxuXG5sZXQgZG9kYWpfbmVzcHJlamVtbm9fc3RhbmplIHN0YW5qZSBhdnRvbWF0ID1cbiAgeyBhdnRvbWF0IHdpdGggc3RhbmphID0gc3RhbmplIDo6IGF2dG9tYXQuc3RhbmphIH1cblxubGV0IGRvZGFqX3NwcmVqZW1ub19zdGFuamUgc3RhbmplIGF2dG9tYXQgPVxuICB7XG4gICAgYXZ0b21hdCB3aXRoXG4gICAgc3RhbmphID0gc3RhbmplIDo6IGF2dG9tYXQuc3RhbmphO1xuICAgIHNwcmVqZW1uYV9zdGFuamEgPSBzdGFuamUgOjogYXZ0b21hdC5zcHJlamVtbmFfc3RhbmphO1xuICB9XG5cbmxldCBkb2Rhal9wcmVob2Qgc3RhbmplMSB6bmFrIHN0YW5qZTIgYXZ0b21hdCA9XG4gIHsgYXZ0b21hdCB3aXRoIHByZWhvZGkgPSAoc3RhbmplMSwgem5haywgc3RhbmplMikgOjogYXZ0b21hdC5wcmVob2RpIH1cblxubGV0IHByZWhvZG5hX2Z1bmtjaWphIGF2dG9tYXQgc3RhbmplIHpuYWsgPVxuICBtYXRjaFxuICAgIExpc3QuZmluZF9vcHRcbiAgICAgIChmdW4gKHN0YW5qZTEsIHpuYWsnLCBfc3RhbmplMikgLT4gc3RhbmplMSA9IHN0YW5qZSAmJiB6bmFrID0gem5haycpXG4gICAgICBhdnRvbWF0LnByZWhvZGlcbiAgd2l0aFxuICB8IE5vbmUgLT4gTm9uZVxuICB8IFNvbWUgKF8sIF8sIHN0YW5qZTIpIC0+IFNvbWUgc3RhbmplMlxuXG5sZXQgemFjZXRub19zdGFuamUgYXZ0b21hdCA9IGF2dG9tYXQuemFjZXRub19zdGFuamVcbmxldCBzZXpuYW1fc3RhbmogYXZ0b21hdCA9IGF2dG9tYXQuc3RhbmphXG5sZXQgc2V6bmFtX3ByZWhvZG92IGF2dG9tYXQgPSBhdnRvbWF0LnByZWhvZGlcblxubGV0IGplX3NwcmVqZW1ub19zdGFuamUgYXZ0b21hdCBzdGFuamUgPVxuICBMaXN0Lm1lbSBzdGFuamUgYXZ0b21hdC5zcHJlamVtbmFfc3RhbmphXG5cbmxldCBlbmtlXzFtb2QzID1cbiAgbGV0IHEwID0gU3RhbmplLml6X25pemEgXCJxMFwiXG4gIGFuZCBxMSA9IFN0YW5qZS5pel9uaXphIFwicTFcIlxuICBhbmQgcTIgPSBTdGFuamUuaXpfbml6YSBcInEyXCIgaW5cbiAgcHJhemVuX2F2dG9tYXQgcTAgfD4gZG9kYWpfc3ByZWplbW5vX3N0YW5qZSBxMVxuICB8PiBkb2Rhal9uZXNwcmVqZW1ub19zdGFuamUgcTJcbiAgfD4gZG9kYWpfcHJlaG9kIHEwICcwJyBxMCB8PiBkb2Rhal9wcmVob2QgcTEgJzAnIHExIHw+IGRvZGFqX3ByZWhvZCBxMiAnMCcgcTJcbiAgfD4gZG9kYWpfcHJlaG9kIHEwICcxJyBxMSB8PiBkb2Rhal9wcmVob2QgcTEgJzEnIHEyIHw+IGRvZGFqX3ByZWhvZCBxMiAnMScgcTBcblxubGV0IHByZWJlcmlfbml6IGF2dG9tYXQgcSBuaXogPVxuICBsZXQgYXV4IGFjYyB6bmFrID1cbiAgICBtYXRjaCBhY2Mgd2l0aCBOb25lIC0+IE5vbmUgfCBTb21lIHEgLT4gcHJlaG9kbmFfZnVua2NpamEgYXZ0b21hdCBxIHpuYWtcbiAgaW5cbiAgbml6IHw+IFN0cmluZy50b19zZXEgfD4gU2VxLmZvbGRfbGVmdCBhdXggKFNvbWUgcSlcbiIsInR5cGUgdCA9IHsgbml6IDogc3RyaW5nOyBpbmRla3NfdHJlbnV0bmVnYV96bmFrYSA6IGludCB9XG5cbmxldCB0cmVudXRuaV96bmFrIHRyYWsgPSBTdHJpbmcuZ2V0IHRyYWsubml6IHRyYWsuaW5kZWtzX3RyZW51dG5lZ2Ffem5ha2FcbmxldCBqZV9uYV9rb25jdSB0cmFrID0gU3RyaW5nLmxlbmd0aCB0cmFrLm5peiA9IHRyYWsuaW5kZWtzX3RyZW51dG5lZ2Ffem5ha2FcblxubGV0IHByZW1ha25pX25hcHJlaiB0cmFrID1cbiAgeyB0cmFrIHdpdGggaW5kZWtzX3RyZW51dG5lZ2Ffem5ha2EgPSBzdWNjIHRyYWsuaW5kZWtzX3RyZW51dG5lZ2Ffem5ha2EgfVxuXG5sZXQgaXpfbml6YSBuaXogPSB7IG5pejsgaW5kZWtzX3RyZW51dG5lZ2Ffem5ha2EgPSAwIH1cbmxldCBwcmF6ZW4gPSBpel9uaXphIFwiXCJcbmxldCB2X25peiB0cmFrID0gdHJhay5uaXpcblxubGV0IHByZWJyYW5pIHRyYWsgPSBTdHJpbmcuc3ViIHRyYWsubml6IDAgdHJhay5pbmRla3NfdHJlbnV0bmVnYV96bmFrYVxuXG5hbmQgbmVwcmVicmFuaSB0cmFrID1cbiAgU3RyaW5nLnN1YiB0cmFrLm5peiB0cmFrLmluZGVrc190cmVudXRuZWdhX3puYWthXG4gICAgKFN0cmluZy5sZW5ndGggdHJhay5uaXogLSB0cmFrLmluZGVrc190cmVudXRuZWdhX3puYWthKVxuIiwidHlwZSB0ID0geyBhdnRvbWF0IDogQXZ0b21hdC50OyB0cmFrIDogVHJhay50OyBzdGFuamUgOiBTdGFuamUudCB9XG5cbmxldCBwb3plbmkgYXZ0b21hdCB0cmFrID1cbiAgeyBhdnRvbWF0OyB0cmFrOyBzdGFuamUgPSBBdnRvbWF0LnphY2V0bm9fc3RhbmplIGF2dG9tYXQgfVxuXG5sZXQgYXZ0b21hdCB7IGF2dG9tYXQ7IF8gfSA9IGF2dG9tYXRcbmxldCB0cmFrIHsgdHJhazsgXyB9ID0gdHJha1xubGV0IHN0YW5qZSB7IHN0YW5qZTsgXyB9ID0gc3RhbmplXG5cbmxldCBrb3Jha19uYXByZWogeyBhdnRvbWF0OyB0cmFrOyBzdGFuamUgfSA9XG4gIGlmIFRyYWsuamVfbmFfa29uY3UgdHJhayB0aGVuIE5vbmVcbiAgZWxzZVxuICAgIGxldCBzdGFuamUnID1cbiAgICAgIEF2dG9tYXQucHJlaG9kbmFfZnVua2NpamEgYXZ0b21hdCBzdGFuamUgKFRyYWsudHJlbnV0bmlfem5hayB0cmFrKVxuICAgIGluXG4gICAgbWF0Y2ggc3RhbmplJyB3aXRoXG4gICAgfCBOb25lIC0+IE5vbmVcbiAgICB8IFNvbWUgc3RhbmplJyAtPlxuICAgICAgICBTb21lIHsgYXZ0b21hdDsgdHJhayA9IFRyYWsucHJlbWFrbmlfbmFwcmVqIHRyYWs7IHN0YW5qZSA9IHN0YW5qZScgfVxuXG5sZXQgamVfdl9zcHJlamVtbmVtX3N0YW5qdSB7IGF2dG9tYXQ7IHN0YW5qZTsgXyB9ID1cbiAgQXZ0b21hdC5qZV9zcHJlamVtbm9fc3RhbmplIGF2dG9tYXQgc3RhbmplXG4iLCJ0eXBlICdhIHQgPSAnYSBhcnJheSBhcnJheVxuXG5sZXQgaW5pdCB3aWR0aCBoZWlnaHQgaW5pdF9jZWxsID1cbiAgQXJyYXkuaW5pdCBoZWlnaHQgKGZ1biBfIC0+IEFycmF5LmluaXQgd2lkdGggKGZ1biBfIC0+IGluaXRfY2VsbCkpXG5cbmxldCBnZXRfY2VsbCBncmlkIHggeSA9IGdyaWQuKHkpLih4KVxuXG5sZXQgc2V0X2NlbGwgZ3JpZCB4IHkgY2VsbCA9IGdyaWQuKHkpLih4KSA8LSBjZWxsXG5cbmxldCBnZXRfbmVpZ2hib3JzIGdyaWQgeCB5ID1cbiAgbGV0IGhlaWdodCA9IEFycmF5Lmxlbmd0aCBncmlkIGluXG4gIGxldCB3aWR0aCA9IEFycmF5Lmxlbmd0aCBncmlkLigwKSBpblxuICBsZXQgbmVpZ2hib3JzID0gcmVmIFtdIGluXG4gIGZvciBkeCA9IC0xIHRvIDEgZG9cbiAgICBmb3IgZHkgPSAtMSB0byAxIGRvXG4gICAgICBpZiBkeCA8PiAwIHx8IGR5IDw+IDAgdGhlbiAgKCogRXhjbHVkZSB0aGUgY2VsbCBpdHNlbGYgKilcbiAgICAgICAgbGV0IG54ID0gKHggKyBkeCArIHdpZHRoKSBtb2Qgd2lkdGggaW5cbiAgICAgICAgbGV0IG55ID0gKHkgKyBkeSArIGhlaWdodCkgbW9kIGhlaWdodCBpblxuICAgICAgICBuZWlnaGJvcnMgOj0gZ3JpZC4obnkpLihueCkgOjogIW5laWdoYm9yc1xuICAgIGRvbmU7XG4gIGRvbmU7XG4gICFuZWlnaGJvcnNcblxubGV0IGhlaWdodCBncmlkID0gQXJyYXkubGVuZ3RoIGdyaWRcblxubGV0IHdpZHRoIGdyaWQgPSBBcnJheS5sZW5ndGggZ3JpZC4oMClcbiIsInR5cGUgJ2EgdCA9IHtcbiAgZ3JpZCA6ICdhIEdyaWQudDtcbiAgdXBkYXRlX3J1bGUgOiAnYSAtPiAnYSBsaXN0IC0+ICdhO1xufVxuXG4oKiBJbml0aWFsaXplIGEgY2VsbHVsYXIgYXV0b21hdG9uIHdpdGggYSBncmlkIGFuZCBhbiB1cGRhdGUgcnVsZSAqKVxubGV0IGluaXQgZ3JpZCB1cGRhdGVfcnVsZSA9IHsgZ3JpZDsgdXBkYXRlX3J1bGUgfVxuXG4oKiBBY2Nlc3NvciBmb3IgdGhlIGdyaWQgKilcbmxldCBnZXRfZ3JpZCB0ID0gdC5ncmlkXG5cbigqIEFjY2Vzc29yIGZvciB0aGUgdXBkYXRlIHJ1bGUgKilcbmxldCBnZXRfdXBkYXRlX3J1bGUgdCA9IHQudXBkYXRlX3J1bGVcblxubGV0IHNldF9ncmlkIHQgbmV3X2dyaWQgPSB7IHQgd2l0aCBncmlkID0gbmV3X2dyaWQgfVxuXG4oKiBPcHRpb25hbDogQSBoZWxwZXIgZnVuY3Rpb24gdG8gaW5pdGlhbGl6ZSBhbiBlbXB0eSBOQ0EgYmFzZWQgb24gZGltZW5zaW9ucywgaW5pdGlhbCBzdGF0ZSwgYW5kIGFuIHVwZGF0ZSBydWxlICopXG5sZXQgZW1wdHlfbmNhIHdpZHRoIGhlaWdodCBpbml0X3N0YXRlIHVwZGF0ZV9ydWxlID1cbiAgbGV0IGdyaWQgPSBHcmlkLmluaXQgd2lkdGggaGVpZ2h0IGluaXRfc3RhdGUgaW5cbiAgeyBncmlkOyB1cGRhdGVfcnVsZSB9XG4iLCJ0eXBlICdhIG5jYSA9ICdhIENlbGx1bGFyQXV0b21hdG9uLnRcblxudHlwZSAnYSB0ID0ge1xuICBuY2EgOiAnYSBuY2E7XG4gIGl0ZXJhdGlvbnMgOiBpbnQ7XG59XG5cbigqIEluaXRpYWxpemUgYSBuZXcgTkNBIHJ1bm5lciB3aXRoIHplcm8gaXRlcmF0aW9ucyAqKVxubGV0IGluaXQgbmNhID1cbiAgeyBuY2EgPSBuY2EgOyBpdGVyYXRpb25zID0gMCB9XG5cbigqIFBlcmZvcm0gb25lIHN0ZXAgaW4gdGhlIGNlbGx1bGFyIGF1dG9tYXRvbiBhbmQgaW5jcmVtZW50IGl0ZXJhdGlvbnMgKilcbmxldCBzdGVwIHQgPVxuICBsZXQgZ3JpZCA9IENlbGx1bGFyQXV0b21hdG9uLmdldF9ncmlkIHQubmNhIGluXG4gIGxldCBoZWlnaHQgPSBHcmlkLmhlaWdodCBncmlkIGluXG4gIGxldCB3aWR0aCA9IEdyaWQud2lkdGggZ3JpZCBpblxuICBsZXQgcnVsZSA9IENlbGx1bGFyQXV0b21hdG9uLmdldF91cGRhdGVfcnVsZSB0Lm5jYSBpblxuICBsZXQgbmV3X2dyaWQgPSBHcmlkLmluaXQgd2lkdGggaGVpZ2h0IChHcmlkLmdldF9jZWxsIGdyaWQgMCAwKSBpblxuICBmb3IgeSA9IDAgdG8gaGVpZ2h0IC0gMSBkb1xuICAgIGZvciB4ID0gMCB0byB3aWR0aCAtIDEgZG9cbiAgICAgIGxldCBjZWxsID0gR3JpZC5nZXRfY2VsbCBncmlkIHggeSBpblxuICAgICAgbGV0IG5laWdoYm9ycyA9IEdyaWQuZ2V0X25laWdoYm9ycyBncmlkIHggeSBpblxuICAgICAgbGV0IG5ld19jZWxsID0gcnVsZSBjZWxsIG5laWdoYm9ycyBpblxuICAgICAgR3JpZC5zZXRfY2VsbCBuZXdfZ3JpZCB4IHkgbmV3X2NlbGxcbiAgICBkb25lXG4gIGRvbmU7XG4gIGxldCB1cGRhdGVkX25jYSA9IENlbGx1bGFyQXV0b21hdG9uLnNldF9ncmlkIHQubmNhIG5ld19ncmlkIGluXG4gIHsgbmNhID0gdXBkYXRlZF9uY2E7IGl0ZXJhdGlvbnMgPSB0Lml0ZXJhdGlvbnMgKyAxIH1cblxuKCogUnVuIHRoZSBOQ0EgZm9yIGEgZ2l2ZW4gbnVtYmVyIG9mIHN0ZXBzLCB1cGRhdGluZyBpdGVyYXRpb25zIGFjY29yZGluZ2x5ICopXG5sZXQgcnVuIHQgc3RlcHMgPVxuICBsZXQgcmVjIGF1eCBuIHQgPVxuICAgIGlmIG4gPD0gMCB0aGVuIHRcbiAgICBlbHNlIGF1eCAobiAtIDEpIChzdGVwIHQpXG4gIGluXG4gIGF1eCBzdGVwcyB0XG5cbmxldCBnZXRfZ3JpZCB0ID0gQ2VsbHVsYXJBdXRvbWF0b24uZ2V0X2dyaWQgdC5uY2FcbmxldCBnZXRfbmNhIHQgPSB0Lm5jYVxubGV0IHNldF9uY2EgdCBuZXdfbmNhID1cbiAgeyB0IHdpdGggbmNhID0gbmV3X25jYSB9IiwidHlwZSB0ID0ge1xuICByZ2IgOiBmbG9hdCAqIGZsb2F0ICogZmxvYXQ7XG4gIGFscGhhIDogZmxvYXQ7XG4gIGhpZGRlbiA6IGZsb2F0IGFycmF5O1xufVxuXG5sZXQgaW5pdCByZ2IgYWxwaGEgaGlkZGVuID0geyByZ2I7IGFscGhhOyBoaWRkZW4gfVxubGV0IGdldF9yZ2IgY2VsbCA9IGNlbGwucmdiXG5sZXQgZ2V0X2FscGhhIGNlbGwgPSBjZWxsLmFscGhhXG5sZXQgZ2V0X2hpZGRlbiBjZWxsID0gY2VsbC5oaWRkZW5cblxubGV0IHNldF9yZ2IgcmdiIGNlbGwgPSB7IGNlbGwgd2l0aCByZ2IgfVxubGV0IHNldF9hbHBoYSBhbHBoYSBjZWxsID0geyBjZWxsIHdpdGggYWxwaGEgfVxubGV0IHNldF9oaWRkZW4gaGlkZGVuIGNlbGwgPSB7IGNlbGwgd2l0aCBoaWRkZW4gfVxuIl19
