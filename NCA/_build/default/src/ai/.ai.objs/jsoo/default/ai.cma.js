// Generated by js_of_ocaml
//# buildInfo:effects=false, kind=cma, use-js-string=true, version=5.4.0

//# unitInfo: Provides: Ai
(function
  (globalThis){
   "use strict";
   var runtime = globalThis.jsoo_runtime, Ai = [0];
   runtime.caml_register_global(0, Ai, "Ai");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Ai__Network
//# unitInfo: Requires: Definicije__Cell, Definicije__CellularAutomaton, Definicije__Grid, Definicije__NcaRunner, Stdlib, Stdlib__Array, Stdlib__List, Stdlib__Printf, Stdlib__Random
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst_Starting_training = "Starting training\n",
    cst_Training_complete_returnin =
      "Training complete, returning update function...\n",
    caml_array_get = runtime.caml_array_get,
    caml_array_set = runtime.caml_array_set,
    caml_check_bound = runtime.caml_check_bound,
    caml_make_vect = runtime.caml_make_vect;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) == 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   function caml_call3(f, a0, a1, a2){
    return (f.l >= 0 ? f.l : f.l = f.length) == 3
            ? f(a0, a1, a2)
            : runtime.caml_call_gen(f, [a0, a1, a2]);
   }
   function caml_call4(f, a0, a1, a2, a3){
    return (f.l >= 0 ? f.l : f.l = f.length) == 4
            ? f(a0, a1, a2, a3)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3]);
   }
   function caml_call5(f, a0, a1, a2, a3, a4){
    return (f.l >= 0 ? f.l : f.l = f.length) == 5
            ? f(a0, a1, a2, a3, a4)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3, a4]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    Stdlib_Random = global_data.Stdlib__Random,
    Stdlib = global_data.Stdlib,
    Stdlib_Printf = global_data.Stdlib__Printf,
    Stdlib_Array = global_data.Stdlib__Array,
    Definicije_CellularAutomaton = global_data.Definicije__CellularAutomaton,
    Definicije_NcaRunner = global_data.Definicije__NcaRunner,
    Definicije_Cell = global_data.Definicije__Cell,
    Definicije_Grid = global_data.Definicije__Grid,
    Stdlib_List = global_data.Stdlib__List,
    _e_ =
      [0,
       [11,
        "Evaluating population for ",
        [4,
         0,
         0,
         0,
         [11,
          ", generation ",
          [4,
           0,
           0,
           0,
           [11, ", remaining generations ", [4, 0, 0, 0, [12, 10, 0]]]]]]],
       "Evaluating population for %d, generation %d, remaining generations %d\n"],
    _f_ =
      [0,
       [11, "Best Loss: ", [8, [0, 0, 0], 0, 0, [12, 10, 0]]],
       "Best Loss: %f\n"],
    _c_ =
      [0,
       [11, cst_Training_complete_returnin, 0],
       cst_Training_complete_returnin],
    _d_ = [0, 0., 0., 0.],
    _b_ = [0, [11, cst_Starting_training, 0], cst_Starting_training],
    _a_ = [0, 1., 1., 1.];
   function sigmoid(x){return 1. / (1. + Math.exp(- x));}
   function mat_vec_mult(mat, vec){
    var
     rows = mat.length - 1,
     cols = vec.length - 1,
     result = caml_make_vect(rows, 0.),
     _aM_ = rows - 1 | 0,
     _aL_ = 0;
    if(_aM_ >= 0){
     var i = _aL_;
     for(;;){
      var _aO_ = cols - 1 | 0, _aN_ = 0;
      if(_aO_ >= 0){
       var j = _aN_;
       for(;;){
        var
         _aQ_ = caml_array_get(vec, j),
         _aR_ = caml_array_get(caml_check_bound(mat, i)[1 + i], j) * _aQ_;
        caml_array_set(result, i, caml_array_get(result, i) + _aR_);
        var _aS_ = j + 1 | 0;
        if(_aO_ !== j){var j = _aS_; continue;}
        break;
       }
      }
      var _aP_ = i + 1 | 0;
      if(_aM_ !== i){var i = _aP_; continue;}
      break;
     }
    }
    return result;
   }
   function mat_add_row_vec(mat, vec){
    var
     rows = mat.length - 1,
     cols = caml_check_bound(mat, 0)[1].length - 1,
     result = caml_call1(Stdlib_Array[6], mat),
     _aE_ = rows - 1 | 0,
     _aD_ = 0;
    if(_aE_ >= 0){
     var i = _aD_;
     for(;;){
      var _aG_ = cols - 1 | 0, _aF_ = 0;
      if(_aG_ >= 0){
       var j = _aF_;
       for(;;){
        var
         _aI_ = caml_array_get(vec, i),
         _aJ_ = caml_array_get(caml_check_bound(result, i)[1 + i], j) + _aI_;
        caml_array_set(result[1 + i], j, _aJ_);
        var _aK_ = j + 1 | 0;
        if(_aG_ !== j){var j = _aK_; continue;}
        break;
       }
      }
      var _aH_ = i + 1 | 0;
      if(_aE_ !== i){var i = _aH_; continue;}
      break;
     }
    }
    return result;
   }
   function initialize_layer(input_size, output_size){
    function _ay_(param){
     function _aC_(param){return caml_call1(Stdlib_Random[10], 2.) - 1.;}
     return caml_call2(Stdlib_Array[1], input_size, _aC_);
    }
    var weights = caml_call2(Stdlib_Array[1], output_size, _ay_);
    function _az_(param){return caml_call1(Stdlib_Random[10], 2.) - 1.;}
    var biases = caml_call2(Stdlib_Array[1], output_size, _az_);
    return [0,
            weights,
            biases,
            function(mat){
             var
              rows = mat.length - 1,
              cols = caml_check_bound(mat, 0)[1].length - 1;
             function _aA_(i){
              function _aB_(j){
               var
                x =
                  caml_check_bound(caml_check_bound(mat, i)[1 + i], j)[1 + j];
               return 0. < x ? x : 0.;
              }
              return caml_call2(Stdlib_Array[1], cols, _aB_);
             }
             return caml_call2(Stdlib_Array[1], rows, _aA_);
            }];
   }
   function cell_to_input_vec(cell){
    var
     rgb = caml_call1(Definicije_Cell[2], cell),
     alpha = caml_call1(Definicije_Cell[3], cell),
     hidden = caml_call1(Definicije_Cell[4], cell),
     vec = caml_make_vect(16, 0.),
     b = rgb[3],
     g = rgb[2],
     r = rgb[1];
    caml_array_set(vec, 0, r);
    caml_array_set(vec, 1, g);
    caml_array_set(vec, 2, b);
    caml_array_set(vec, 3, alpha);
    caml_call5(Stdlib_Array[8], hidden, 0, vec, 4, 12);
    return vec;
   }
   function clamp(x){return x < 0. ? 0. : 1. < x ? 1. : x;}
   function update_rule(network, cell, neighbors){
    var
     cell_vec = cell_to_input_vec(cell),
     neighbors_vecs =
       caml_call2(Stdlib_List[19], cell_to_input_vec, neighbors),
     all_vecs = [0, cell_vec, neighbors_vecs],
     flatten_vecs = caml_call1(Stdlib_Array[4], all_vecs),
     input_vec = caml_make_vect(144, 0.);
    caml_call5(Stdlib_Array[8], flatten_vecs, 0, input_vec, 0, 144);
    var inputs = [0, input_vec], layer = network[1];
    function _as_(v){return mat_vec_mult(layer[1], v);}
    var
     z = caml_call2(Stdlib_Array[13], _as_, inputs),
     z_biased = mat_add_row_vec(z, layer[2]),
     layer1_output = caml_call1(layer[3], z_biased),
     layer$0 = network[2];
    function _at_(v){return mat_vec_mult(layer$0[1], v);}
    var
     z$0 = caml_call2(Stdlib_Array[13], _at_, layer1_output),
     z_biased$0 = mat_add_row_vec(z$0, layer$0[2]);
    function _au_(row){return caml_call2(Stdlib_Array[13], sigmoid, row);}
    var
     output = caml_call2(Stdlib_Array[13], _au_, z_biased$0),
     output$0 = caml_check_bound(output, 0)[1],
     _av_ = clamp(caml_array_get(output$0, 2)),
     _aw_ = clamp(caml_array_get(output$0, 1)),
     rgb = [0, clamp(caml_array_get(output$0, 0)), _aw_, _av_],
     alpha = clamp(caml_array_get(output$0, 3));
    function _ax_(i){return clamp(caml_array_get(output$0, i + 4 | 0));}
    var hidden = caml_call2(Stdlib_Array[1], 12, _ax_);
    return caml_call3(Definicije_Cell[1], rgb, alpha, hidden);
   }
   function train_network(small_grid){
    caml_call1(Stdlib_Printf[2], _b_);
    function calculate_population_and_gener(n){
     if(8 > n){
      var
       gen_size$1 = 200 - (((n - 2 | 0) * 100 | 0) / 6 | 0) | 0,
       num_gens$1 = 20 - (((n - 2 | 0) * 10 | 0) / 6 | 0) | 0;
      return [0, gen_size$1, num_gens$1];
     }
     if(10 <= n){
      var
       gen_size = 40 - (((n - 10 | 0) * 30 | 0) / 10 | 0) | 0,
       num_gens = 4 - (((n - 10 | 0) * 3 | 0) / 10 | 0) | 0;
      return [0, gen_size, num_gens];
     }
     var
      gen_size$0 = 100 - (((n - 8 | 0) * 60 | 0) / 2 | 0) | 0,
      num_gens$0 = 10 - (((n - 8 | 0) * 6 | 0) / 2 | 0) | 0;
     return [0, gen_size$0, num_gens$0];
    }
    var initial_pop_size = calculate_population_and_gener(2)[1];
    function _C_(param){
     var
      layer1 = initialize_layer(144, 200),
      layer2 = initialize_layer(200, 16);
     return [0, layer1, layer2, 0];
    }
    var
     population$0 = caml_call2(Stdlib_Array[1], initial_pop_size, _C_),
     population = population$0,
     current_generation = 0,
     n = 2,
     stagnation_counter$0 = 0;
    a:
    for(;;){
     if(20 < n){
      var
       _v_ = caml_check_bound(population, 0)[1],
       _w_ =
         function(best, network){
          var match = network[3];
          if(match){
           var loss = match[1], match$0 = best[3];
           if(match$0) var l = match$0[1], l$0 = l; else var l$0 = Stdlib[25];
           if(loss < l$0) return network;
          }
          return best;
         },
       best_network = caml_call3(Stdlib_Array[15], _w_, _v_, population);
      caml_call1(Stdlib_Printf[2], _c_);
      return function(_aq_, _ar_){
       return update_rule(best_network, _aq_, _ar_);};
     }
     var
      _g_ = caml_call3(Definicije_Cell[1], _a_, 0., caml_make_vect(12, 0.)),
      target_grid = caml_call3(Definicije_Grid[1], n + 2 | 0, n + 2 | 0, _g_),
      large_width = caml_call1(Definicije_Grid[6], target_grid),
      small_width = caml_call1(Definicije_Grid[6], small_grid);
     if(small_width <= large_width){
      var
       start_x = (large_width - small_width | 0) / 2 | 0,
       _i_ = small_width - 1 | 0,
       _h_ = 0;
      if(_i_ >= 0){
       var y = _h_;
       for(;;){
        var _k_ = small_width - 1 | 0, _j_ = 0;
        if(_k_ >= 0){
         var x = _j_;
         for(;;){
          var
           cell = caml_call3(Definicije_Grid[2], small_grid, x, y),
           _m_ = function(param){return caml_call1(Stdlib_Random[10], 1.);},
           new_hidden = caml_call2(Stdlib_Array[1], 12, _m_),
           new_cell = caml_call2(Definicije_Cell[7], new_hidden, cell);
          caml_call4
           (Definicije_Grid[3],
            target_grid,
            start_x + x | 0,
            start_x + y | 0,
            new_cell);
          var _n_ = x + 1 | 0;
          if(_k_ !== x){var x = _n_; continue;}
          break;
         }
        }
        var _l_ = y + 1 | 0;
        if(_i_ !== y){var y = _l_; continue;}
        break;
       }
      }
     }
     else{
      var
       start_x$0 = (small_width - large_width | 0) / 2 | 0,
       _p_ = large_width - 1 | 0,
       _o_ = 0;
      if(_p_ >= 0){
       var y$0 = _o_;
       for(;;){
        var _r_ = large_width - 1 | 0, _q_ = 0;
        if(_r_ >= 0){
         var x$0 = _q_;
         for(;;){
          var
           cell$0 =
             caml_call3
              (Definicije_Grid[2],
               small_grid,
               start_x$0 + x$0 | 0,
               start_x$0 + y$0 | 0),
           _t_ = function(param){return caml_call1(Stdlib_Random[10], 1.);},
           new_hidden$0 = caml_call2(Stdlib_Array[1], 12, _t_),
           new_cell$0 = caml_call2(Definicije_Cell[7], new_hidden$0, cell$0);
          caml_call4(Definicije_Grid[3], target_grid, x$0, y$0, new_cell$0);
          var _u_ = x$0 + 1 | 0;
          if(_r_ !== x$0){var x$0 = _u_; continue;}
          break;
         }
        }
        var _s_ = y$0 + 1 | 0;
        if(_p_ !== y$0){var y$0 = _s_; continue;}
        break;
       }
      }
     }
     var
      hidden = caml_make_vect(12, 1.),
      _x_ = caml_call3(Definicije_Cell[1], _d_, 1., hidden);
     caml_call4(Definicije_Grid[3], target_grid, n, n, _x_);
     var
      gen_remaining$1 = calculate_population_and_gener(n)[2],
      new_population = population,
      gen_remaining = gen_remaining$1,
      stagnation_counter = stagnation_counter$0;
     for(;;){
      if(0 !== gen_remaining){
       caml_call4(Stdlib_Printf[2], _e_, n, current_generation, gen_remaining);
       var
        _y_ =
          function(target_grid){
            return function(network){
             function _an_(_ao_, _ap_){
              return update_rule(network, _ao_, _ap_);
             }
             var
              nca =
                caml_call2(Definicije_CellularAutomaton[1], target_grid, _an_),
              runner = caml_call1(Definicije_NcaRunner[1], nca),
              final_nca = caml_call2(Definicije_NcaRunner[3], runner, 40),
              final_grid = caml_call1(Definicije_NcaRunner[4], final_nca),
              width = caml_call1(Definicije_Grid[6], final_grid),
              height = caml_call1(Definicije_Grid[5], final_grid),
              total_distance = [0, 0.],
              _ai_ = height - 1 | 0,
              _ah_ = 0;
             if(_ai_ >= 0){
              var y = _ah_;
              for(;;){
               var _ak_ = width - 1 | 0, _aj_ = 0;
               if(_ak_ >= 0){
                var x = _aj_;
                for(;;){
                 var
                  cell1 = caml_call3(Definicije_Grid[2], final_grid, x, y),
                  cell2 = caml_call3(Definicije_Grid[2], target_grid, x, y),
                  match = caml_call1(Definicije_Cell[2], cell1),
                  b1 = match[3],
                  g1 = match[2],
                  r1 = match[1],
                  match$0 = caml_call1(Definicije_Cell[2], cell2),
                  b2 = match$0[3],
                  g2 = match$0[2],
                  r2 = match$0[1],
                  a1 = caml_call1(Definicije_Cell[3], cell1),
                  a2 = caml_call1(Definicije_Cell[3], cell2),
                  distance =
                    Math.pow(r1 - r2, 2.) + Math.pow(g1 - g2, 2.)
                    + Math.pow(b1 - b2, 2.)
                    + Math.pow(a1 - a2, 2.);
                 total_distance[1] = total_distance[1] + distance;
                 var _am_ = x + 1 | 0;
                 if(_ak_ !== x){var x = _am_; continue;}
                 break;
                }
               }
               var _al_ = y + 1 | 0;
               if(_ai_ !== y){var y = _al_; continue;}
               break;
              }
             }
             var dist = total_distance[1];
             network[3] = [0, dist];
             return 0;};
           }
           (target_grid);
       caml_call2(Stdlib_Array[11], _y_, new_population);
       var
        _z_ =
          function(n1, n2){
           var match = n2[3];
           if(match) var l = match[1], l$0 = l; else var l$0 = Stdlib[25];
           var match$0 = n1[3];
           if(match$0)
            var l$1 = match$0[1], l$2 = l$1;
           else
            var l$2 = Stdlib[25];
           return runtime.caml_float_compare(l$2, l$0);
          };
       caml_call2(Stdlib_Array[30], _z_, new_population);
       var
        best_network$0 = caml_check_bound(new_population, 0)[1],
        match = best_network$0[3];
       if(match)
        var l = match[1], best_loss = l;
       else
        var best_loss = Stdlib[25];
       caml_call2(Stdlib_Printf[2], _f_, best_loss);
       var
        new_stagnation_counter =
          1. < best_loss ? stagnation_counter + 1 | 0 : 0,
        match$0 = best_network$0[3],
        switch$0 = 0;
       if(match$0){var dist = match$0[1]; if(dist <= 1.) switch$0 = 1;}
       if(! switch$0){
        var
         elapsed_generations = current_generation - 0 | 0,
         adjusted_mutation_rate = 0.7 - 0.01 * elapsed_generations,
         _A_ =
           function
            (n,
             adjusted_mutation_rate,
             new_population,
             new_stagnation_counter){
             return function(i){
              if(i < (calculate_population_and_gener(n)[1] / 2 | 0))
               return caml_check_bound(new_population, i)[1 + i];
              if(caml_call1(Stdlib_Random[10], 1.) < 0.5){
               var
                _G_ = calculate_population_and_gener(n)[1] / 2 | 0,
                _H_ = caml_call1(Stdlib_Random[5], _G_),
                parent1 = caml_check_bound(new_population, _H_)[1 + _H_],
                _I_ = calculate_population_and_gener(n)[1] / 2 | 0,
                _J_ = caml_call1(Stdlib_Random[5], _I_),
                parent2 = caml_check_bound(new_population, _J_)[1 + _J_],
                crossover_layer =
                  function(layer1, layer2){
                   var
                    rows = layer1[1].length - 1,
                    cols = caml_check_bound(layer1[1], 0)[1].length - 1;
                   function _Y_(param){return caml_make_vect(cols, 0.);}
                   var
                    new_weights = caml_call2(Stdlib_Array[1], rows, _Y_),
                    new_biases = caml_make_vect(layer1[2].length - 1, 0.),
                    ___ = rows - 1 | 0,
                    _Z_ = 0;
                   if(___ >= 0){
                    var i$0 = _Z_;
                    for(;;){
                     var _ad_ = cols - 1 | 0, _ac_ = 0;
                     if(_ad_ >= 0){
                      var j = _ac_;
                      for(;;){
                       var
                        w1 =
                          caml_array_get(caml_check_bound(layer1[1], i$0)[1 + i$0], j),
                        w2 =
                          caml_array_get(caml_check_bound(layer2[1], i$0)[1 + i$0], j),
                        diff$0 = Math.abs(w1 - w2),
                        min_val$0 = caml_call2(Stdlib[16], w1, w2) - 0.1 * diff$0,
                        max_val$0 = caml_call2(Stdlib[17], w1, w2) + 0.1 * diff$0,
                        _af_ =
                          caml_call1(Stdlib_Random[10], max_val$0 - min_val$0)
                          + min_val$0;
                       caml_array_set
                        (caml_check_bound(new_weights, i$0)[1 + i$0], j, _af_);
                       var _ag_ = j + 1 | 0;
                       if(_ad_ !== j){var j = _ag_; continue;}
                       break;
                      }
                     }
                     var _ae_ = i$0 + 1 | 0;
                     if(___ !== i$0){var i$0 = _ae_; continue;}
                     break;
                    }
                   }
                   var _aa_ = new_biases.length - 1 - 1 | 0, _$_ = 0;
                   if(_aa_ >= 0){
                    var i = _$_;
                    for(;;){
                     var
                      b1 = caml_array_get(layer1[2], i),
                      b2 = caml_array_get(layer2[2], i),
                      diff = Math.abs(b1 - b2),
                      min_val = caml_call2(Stdlib[16], b1, b2) - 0.1 * diff,
                      max_val = caml_call2(Stdlib[17], b1, b2) + 0.1 * diff;
                     caml_array_set
                      (new_biases,
                       i,
                       caml_call1(Stdlib_Random[10], max_val - min_val) + min_val);
                     var _ab_ = i + 1 | 0;
                     if(_aa_ !== i){var i = _ab_; continue;}
                     break;
                    }
                   }
                   return [0, new_weights, new_biases, layer1[3]];
                  },
                _D_ = crossover_layer(parent1[2], parent2[2]);
               return [0, crossover_layer(parent1[1], parent2[1]), _D_, 0];
              }
              var
               _K_ = calculate_population_and_gener(n)[1] / 2 | 0,
               _L_ = caml_call1(Stdlib_Random[5], _K_),
               network = caml_check_bound(new_population, _L_)[1 + _L_];
              if
               (!
                (caml_call1(Stdlib_Random[10], 1.) < adjusted_mutation_rate))
               return network;
              var mutation_rate = 5 < new_stagnation_counter ? 0.4 : 0.2;
              function mutate_layer(layer){
               var
                rows = layer[1].length - 1,
                cols = caml_check_bound(layer[1], 0)[1].length - 1,
                _N_ = rows - 1 | 0,
                _M_ = 0;
               if(_N_ >= 0){
                var i$0 = _M_;
                for(;;){
                 var _T_ = cols - 1 | 0, _S_ = 0;
                 if(_T_ >= 0){
                  var j = _S_;
                  for(;;){
                   if(caml_call1(Stdlib_Random[10], 1.) < mutation_rate){
                    var
                     _V_ = caml_call1(Stdlib_Random[10], 0.4) - 0.2,
                     _W_ =
                       caml_array_get(caml_check_bound(layer[1], i$0)[1 + i$0], j)
                       + _V_;
                    caml_array_set
                     (caml_check_bound(layer[1], i$0)[1 + i$0], j, _W_);
                   }
                   var _X_ = j + 1 | 0;
                   if(_T_ !== j){var j = _X_; continue;}
                   break;
                  }
                 }
                 var _U_ = i$0 + 1 | 0;
                 if(_N_ !== i$0){var i$0 = _U_; continue;}
                 break;
                }
               }
               var _P_ = layer[2].length - 1 - 1 | 0, _O_ = 0;
               if(_P_ >= 0){
                var i = _O_;
                for(;;){
                 if(caml_call1(Stdlib_Random[10], 1.) < mutation_rate){
                  var _Q_ = caml_call1(Stdlib_Random[10], 0.4) - 0.2;
                  caml_array_set
                   (layer[2], i, caml_array_get(layer[2], i) + _Q_);
                 }
                 var _R_ = i + 1 | 0;
                 if(_P_ !== i){var i = _R_; continue;}
                 break;
                }
               }
               return layer;
              }
              var _E_ = network[3], _F_ = mutate_layer(network[2]);
              return [0, mutate_layer(network[1]), _F_, _E_];};
            }
            (n,
             adjusted_mutation_rate,
             new_population,
             new_stagnation_counter),
         _B_ = calculate_population_and_gener(n)[1],
         new_population$0 = caml_call2(Stdlib_Array[1], _B_, _A_),
         gen_remaining$0 = gen_remaining - 1 | 0,
         new_population = new_population$0,
         gen_remaining = gen_remaining$0,
         stagnation_counter = new_stagnation_counter;
        continue;
       }
      }
      var
       n$0 = n + 2 | 0,
       generation = current_generation + 1 | 0,
       population = new_population,
       current_generation = generation,
       n = n$0;
      continue a;
     }
    }
   }
   var Ai_Network = [0, train_network];
   runtime.caml_register_global(59, Ai_Network, "Ai__Network");
   return;
  }
  (globalThis));

//# sourceMappingURL=data:application/json;base64,
