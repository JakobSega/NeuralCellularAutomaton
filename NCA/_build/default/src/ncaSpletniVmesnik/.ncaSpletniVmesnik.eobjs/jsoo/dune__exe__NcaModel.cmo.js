// Generated by js_of_ocaml
//# buildInfo:effects=false, kind=cmo, use-js-string=true, version=5.4.0

//# unitInfo: Provides: Dune__exe__NcaModel
//# unitInfo: Requires: Definicije__Cell, Definicije__CellularAutomaton, Definicije__Grid, Definicije__NcaRunner, Stdlib
(function
  (globalThis){
   "use strict";
   var runtime = globalThis.jsoo_runtime, caml_mul = runtime.caml_mul;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) == 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   function caml_call3(f, a0, a1, a2){
    return (f.l >= 0 ? f.l : f.l = f.length) == 3
            ? f(a0, a1, a2)
            : runtime.caml_call_gen(f, [a0, a1, a2]);
   }
   function caml_call4(f, a0, a1, a2, a3){
    return (f.l >= 0 ? f.l : f.l = f.length) == 4
            ? f(a0, a1, a2, a3)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    Definicije_NcaRunner = global_data.Definicije__NcaRunner,
    Definicije_Grid = global_data.Definicije__Grid,
    Definicije_Cell = global_data.Definicije__Cell,
    Definicije_CellularAutomaton = global_data.Definicije__CellularAutomaton,
    _a_ = [0, 0., 0., 0.];
   function init(width, height, cell, update_rule){
    var
     _f_ = caml_call3(Definicije_Grid[1], width, height, cell),
     _g_ = caml_call2(Definicije_CellularAutomaton[1], _f_, update_rule),
     init_nca = caml_call1(Definicije_NcaRunner[1], _g_);
    return [0, init_nca];
   }
   function update(model, param){
    if(0 !== param[0]){
     var
      n = param[1],
      steps = Math.pow(2., n),
      updated_nca = caml_call2(Definicije_NcaRunner[3], model[1], steps | 0);
     return [0, updated_nca];
    }
    var
     y = param[2],
     x = param[1],
     grid = caml_call1(Definicije_NcaRunner[4], model[1]),
     width = caml_call1(Definicije_Grid[6], grid),
     height = caml_call1(Definicije_Grid[5], grid);
    function wrap_index(idx, max){
     return 0 <= idx ? max <= idx ? idx - max | 0 : idx : idx + max | 0;
    }
    var dx = -5;
    a:
    for(;;){
     var dy = -5;
     for(;;){
      var distance = Math.sqrt(caml_mul(dx, dx) + caml_mul(dy, dy) | 0);
      if(distance <= 5){
       var
        nx = wrap_index(x + dx | 0, width),
        ny = wrap_index(y + dy | 0, height),
        cell = caml_call3(Definicije_Grid[2], grid, nx, ny),
        _d_ = caml_call2(Definicije_Cell[5], _a_, cell),
        new_cell = caml_call2(Definicije_Cell[6], 0., _d_);
       caml_call4(Definicije_Grid[3], grid, nx, ny, new_cell);
      }
      var _e_ = dy + 1 | 0;
      if(5 !== dy){var dy = _e_; continue;}
      var _c_ = dx + 1 | 0;
      if(5 !== dx){var dx = _c_; continue a;}
      var
       _b_ = caml_call1(Definicije_NcaRunner[5], model[1]),
       new_nca = caml_call2(Definicije_CellularAutomaton[3], _b_, grid),
       updated_runner = caml_call2(Definicije_NcaRunner[6], model[1], new_nca);
      return [0, updated_runner];
     }
    }
   }
   var Dune_exe_NcaModel = [0, init, update];
   runtime.caml_register_global(7, Dune_exe_NcaModel, "Dune__exe__NcaModel");
   return;
  }
  (globalThis));

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLjAsImZpbGUiOiIubmNhU3BsZXRuaVZtZXNuaWsuZW9ianMvanNvby9kdW5lX19leGVfX05jYU1vZGVsLmNtby5qcyIsInNvdXJjZVJvb3QiOiIiLCJuYW1lcyI6WyJpbml0Iiwid2lkdGgiLCJoZWlnaHQiLCJjZWxsIiwidXBkYXRlX3J1bGUiLCJpbml0X25jYSIsInVwZGF0ZSIsIm1vZGVsIiwibiIsInN0ZXBzIiwidXBkYXRlZF9uY2EiLCJ5IiwieCIsImdyaWQiLCJ3cmFwX2luZGV4IiwiaWR4IiwibWF4IiwiZHgiLCJkeSIsImRpc3RhbmNlIiwibngiLCJueSIsIm5ld19jZWxsIiwibmV3X25jYSIsInVwZGF0ZWRfcnVubmVyIl0sInNvdXJjZXMiOlsiL3dvcmtzcGFjZV9yb290L3NyYy9uY2FTcGxldG5pVm1lc25pay9uY2FNb2RlbC5tbCJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7O0c7Ozs7O0c7Ozs7O0c7Ozs7O0c7Ozs7Ozs7Ozs7OztZQVdJQSxLQUFLQyxPQUFNQyxRQUFPQyxNQUFLQztJQUN6QjtLQUFzRCxNQUFBLCtCQUQvQ0gsT0FBTUMsUUFBT0M7S0FDVSxNQUFBLGlEQURMQztLQUNyQkMsV0FBVztJQUNmLFdBRElBO0dBQ2tCO1lBR3BCQyxPQUFPQztJO0tBZ0NLO01BREhDO01BQ0xDLFFBQVEsYUFESEQ7TUFFTEUsY0FBYyxvQ0FqQ1hILFVBZ0NIRTtLQUVKLFdBRElDOztJQS9CUztLQURKQztLQUFIQztLQUNBQyxPQUFPLG9DQUZOTjtLQUlETixRQUFRLCtCQUZSWTtLQUdBWCxTQUFTLCtCQUhUVztJQU1KLFNBQUlDLFdBQVdDLEtBQUlDO0tBQ2pCLFlBRGFELE1BQUlDLE9BQUpELE1BQUFBLE1BQUlDLFVBQUpELE1BQUFBLE1BQUlDO0lBR1Q7UUFJVkM7OztTQUNFQzs7TUFDaUIsSUFBWEMsV0FBVyxtQkFGbkJGLElBQUFBLGVBQ0VDLElBQUFBO1NBQ01DO09BRU87UUFBTEMsS0FYTk4sV0FQQUYsSUFjSkssUUFYSWhCO1FBZ0JNb0IsS0FaTlAsV0FQR0gsSUFlTE8sUUFYRWhCO1FBZ0JNQyxPQUFPLCtCQW5CYlUsTUFpQk1PLElBQ0FDO1FBRThCLE1BQUEsb0NBRDlCbEI7UUFDQW1CLFdBQVc7T0FDZiwrQkFyQkZULE1BaUJNTyxJQUNBQyxJQUVBQzs7Z0JBTlJKO2VBQUFBLFFBQUFBO01BREYsVUFBQUQ7ZUFBQUEsUUFBQUE7TUFZeUM7T0FBQSxNQUFBLG9DQTNCcENWO09BMkJEZ0IsVUFBVSxpREF6QlZWO09BMEJBVyxpQkFBaUIsb0NBNUJoQmpCLFVBMkJEZ0I7TUFFSixXQURJQzs7OzsrQkFqQ054QixNQUtBTTs7O0UiLCJzb3VyY2VzQ29udGVudCI6WyJvcGVuIERlZmluaWNpamVcblxuKCogTWVzc2FnZSB0eXBlIHRvIGhhbmRsZSBjZWxsIGNsaWNrcyAqKVxudHlwZSBtc2cgPSBLbGlrIG9mIGludCAqIGludCB8IEtleVByZXNzIG9mIGludFxuXG4oKiBNb2RlbCBkZWZpbml0aW9uICopXG50eXBlIG1vZGVsID0ge1xuICBhdnRvbWF0IDogQ2VsbC50IE5jYVJ1bm5lci50O1xufVxuXG4oKiBJbml0aWFsaXplIGEgbW9kZWwgd2l0aCBhbiBlbXB0eSBncmlkICopXG5sZXQgaW5pdCB3aWR0aCBoZWlnaHQgY2VsbCB1cGRhdGVfcnVsZSA9XG4gIGxldCBpbml0X25jYSA9IE5jYVJ1bm5lci5pbml0IChDZWxsdWxhckF1dG9tYXRvbi5pbml0IChHcmlkLmluaXQgd2lkdGggaGVpZ2h0IGNlbGwpIHVwZGF0ZV9ydWxlKSBpblxuICB7IGF2dG9tYXQgPSBpbml0X25jYSB9XG5cbigqIFVwZGF0ZSBmdW5jdGlvbiB0byBoYW5kbGUgY2VsbCBjbGlja3MgKilcbmxldCB1cGRhdGUgbW9kZWwgPSBmdW5jdGlvblxuICB8IEtsaWsgKHgsIHkpIC0+XG4gICAgICBsZXQgZ3JpZCA9IE5jYVJ1bm5lci5nZXRfZ3JpZCBtb2RlbC5hdnRvbWF0IGluXG4gICAgICBsZXQgcmFkaXVzID0gNSBpbiAoKiBSYWRpdXMgb2YgdGhlIGNpcmN1bGFyIG5laWdoYm9yaG9vZCAqKVxuICAgICAgbGV0IHdpZHRoID0gR3JpZC53aWR0aCBncmlkIGluXG4gICAgICBsZXQgaGVpZ2h0ID0gR3JpZC5oZWlnaHQgZ3JpZCBpblxuICAgICAgXG4gICAgICAoKiBGdW5jdGlvbiB0byBoYW5kbGUgdG9yb2lkYWwgd3JhcHBpbmcgKilcbiAgICAgIGxldCB3cmFwX2luZGV4IGlkeCBtYXggPVxuICAgICAgICBpZiBpZHggPCAwIHRoZW4gaWR4ICsgbWF4XG4gICAgICAgIGVsc2UgaWYgaWR4ID49IG1heCB0aGVuIGlkeCAtIG1heFxuICAgICAgICBlbHNlIGlkeFxuICAgICAgaW5cblxuICAgICAgKCogVXBkYXRlIGNlbGxzIGluIHRoZSA3eDcgY2lyY3VsYXIgbmVpZ2hib3Job29kICopXG4gICAgICBmb3IgZHggPSAtcmFkaXVzIHRvIHJhZGl1cyBkb1xuICAgICAgICBmb3IgZHkgPSAtcmFkaXVzIHRvIHJhZGl1cyBkb1xuICAgICAgICAgIGxldCBkaXN0YW5jZSA9IHNxcnQgKGZsb2F0X29mX2ludCAoZHggKiBkeCArIGR5ICogZHkpKSBpblxuICAgICAgICAgIGlmIGRpc3RhbmNlIDw9IGZsb2F0X29mX2ludCByYWRpdXMgdGhlblxuICAgICAgICAgICAgbGV0IG54ID0gd3JhcF9pbmRleCAoeCArIGR4KSB3aWR0aCBpblxuICAgICAgICAgICAgbGV0IG55ID0gd3JhcF9pbmRleCAoeSArIGR5KSBoZWlnaHQgaW5cbiAgICAgICAgICAgIGxldCBjZWxsID0gR3JpZC5nZXRfY2VsbCBncmlkIG54IG55IGluXG4gICAgICAgICAgICBsZXQgbmV3X2NlbGwgPSBDZWxsLnNldF9hbHBoYSAwLjAgKENlbGwuc2V0X3JnYiAoMC4wLCAwLjAsIDAuMCkgY2VsbCkgaW5cbiAgICAgICAgICAgIEdyaWQuc2V0X2NlbGwgZ3JpZCBueCBueSBuZXdfY2VsbFxuICAgICAgICBkb25lXG4gICAgICBkb25lO1xuICAgICAgXG4gICAgICBsZXQgbmV3X25jYSA9IENlbGx1bGFyQXV0b21hdG9uLnNldF9ncmlkIChOY2FSdW5uZXIuZ2V0X25jYSBtb2RlbC5hdnRvbWF0KSBncmlkIGluXG4gICAgICBsZXQgdXBkYXRlZF9ydW5uZXIgPSBOY2FSdW5uZXIuc2V0X25jYSBtb2RlbC5hdnRvbWF0IG5ld19uY2EgaW5cbiAgICAgIHsgYXZ0b21hdCA9IHVwZGF0ZWRfcnVubmVyIH1cblxuICB8IEtleVByZXNzIG4gLT5cbiAgICBsZXQgc3RlcHMgPSAyLiAqKiAoZmxvYXRfb2ZfaW50IG4pIGluXG4gICAgbGV0IHVwZGF0ZWRfbmNhID0gTmNhUnVubmVyLnJ1biBtb2RlbC5hdnRvbWF0IChpbnRfb2ZfZmxvYXQgc3RlcHMpIGluXG4gICAgeyBhdnRvbWF0ID0gdXBkYXRlZF9uY2EgfSJdfQ==
