// Generated by js_of_ocaml
//# buildInfo:effects=false, kind=cmo, use-js-string=true, version=5.4.0

//# unitInfo: Provides: Dune__exe__NcaView
//# unitInfo: Requires: Definicije__Cell, Definicije__Grid, Definicije__NcaRunner, Stdlib, Stdlib__list, Stdlib__printf, Vdom
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst_dpx = "%dpx",
    cst = ", ",
    cst_0$5 = "0",
    cst_margin$1 = "margin",
    cst_padding$1 = "padding",
    cst_px = "px",
    cst_width$1 = "width";
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) == 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   function caml_call3(f, a0, a1, a2){
    return (f.l >= 0 ? f.l : f.l = f.length) == 3
            ? f(a0, a1, a2)
            : runtime.caml_call_gen(f, [a0, a1, a2]);
   }
   function caml_call4(f, a0, a1, a2, a3){
    return (f.l >= 0 ? f.l : f.l = f.length) == 4
            ? f(a0, a1, a2, a3)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3]);
   }
   function caml_call5(f, a0, a1, a2, a3, a4){
    return (f.l >= 0 ? f.l : f.l = f.length) == 5
            ? f(a0, a1, a2, a3, a4)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3, a4]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    Definicije_Grid = global_data.Definicije__Grid,
    Definicije_Cell = global_data.Definicije__Cell,
    Vdom = global_data.Vdom,
    Stdlib_printf = global_data.Stdlib__printf,
    Stdlib_list = global_data.Stdlib__list,
    Definicije_NcaRunner = global_data.Definicije__NcaRunner,
    Stdlib = global_data.Stdlib,
    cst_pointer = "pointer",
    cst_cursor = "cursor",
    _b_ = [0, [8, [0, 0, 0], 0, [0, 2], 0], "%.2f"],
    cst_opacity = "opacity",
    cst_border_box = "border-box",
    cst_box_sizing = "box-sizing",
    cst_0 = cst_0$5,
    cst_margin = cst_margin$1,
    cst_0$0 = cst_0$5,
    cst_padding = cst_padding$1,
    cst_1px_solid_ccc = "1px solid #ccc",
    cst_border = "border",
    _c_ = [0, [4, 0, 0, 0, [11, cst_px, 0]], cst_dpx],
    cst_height = "height",
    _d_ = [0, [4, 0, 0, 0, [11, cst_px, 0]], cst_dpx],
    cst_width = cst_width$1,
    cst_background_color = "background-color",
    cst_td = "td",
    cst_0$1 = cst_0$5,
    cst_padding$0 = cst_padding$1,
    cst_0$2 = cst_0$5,
    cst_margin$0 = cst_margin$1,
    cst_tr = "tr",
    cst_tbody = "tbody",
    cst_0$3 = cst_0$5,
    cst_tabindex = "tabindex",
    _e_ = [0, [4, 0, 0, 0, [11, cst_px, 0]], cst_dpx],
    cst_width$0 = cst_width$1,
    cst_0$4 = cst_0$5,
    cst_border_spacing = "border-spacing",
    cst_collapse = "collapse",
    cst_border_collapse = "border-collapse",
    cst_table = "table",
    _a_ =
      [0,
       [11,
        "rgb(",
        [4,
         0,
         0,
         0,
         [11, cst, [4, 0, 0, 0, [11, cst, [4, 0, 0, 0, [12, 41, 0]]]]]]],
       "rgb(%d, %d, %d)"];
   function rgb_to_string(param){
    var b = param[3], g = param[2], r = param[1];
    return caml_call4
            (Stdlib_printf[4], _a_, r * 255. | 0, g * 255. | 0, b * 255. | 0);
   }
   function color_with_opacity(r, g, b, a){
    var
     color = rgb_to_string([0, r, g, b]),
     _H_ = caml_call2(Stdlib[17], a, 0.),
     opacity = caml_call2(Stdlib[16], _H_, 1.);
    return [0, color, opacity];
   }
   function view(model){
    var
     grid = caml_call1(Definicije_NcaRunner[4], model[1]),
     width = caml_call1(Definicije_Grid[6], grid),
     height = caml_call1(Definicije_Grid[5], grid),
     cell_size = 5;
    function _f_(y){
     function _o_(x){
      var
       cell = caml_call3(Definicije_Grid[2], grid, x, y),
       match = caml_call1(Definicije_Cell[2], cell),
       b = match[3],
       g = match[2],
       r = match[1],
       a = caml_call1(Definicije_Cell[3], cell),
       match$0 = color_with_opacity(r, g, b, a),
       opacity = match$0[2],
       color = match$0[1],
       _r_ = 0,
       _s_ = 0;
      function _t_(param){return [0, x, y];}
      var
       _u_ = [0, caml_call3(Vdom[11], 0, 0, _t_), _s_],
       _v_ = [0, caml_call2(Vdom[35], cst_cursor, cst_pointer), _u_],
       _w_ = caml_call2(Stdlib_printf[4], _b_, opacity),
       _x_ = [0, caml_call2(Vdom[35], cst_opacity, _w_), _v_],
       _y_ = [0, caml_call2(Vdom[35], cst_box_sizing, cst_border_box), _x_],
       _z_ = [0, caml_call2(Vdom[35], cst_margin, cst_0), _y_],
       _A_ = [0, caml_call2(Vdom[35], cst_padding, cst_0$0), _z_],
       _B_ = [0, caml_call2(Vdom[35], cst_border, cst_1px_solid_ccc), _A_],
       _C_ = caml_call2(Stdlib_printf[4], _c_, cell_size),
       _D_ = [0, caml_call2(Vdom[35], cst_height, _C_), _B_],
       _E_ = caml_call2(Stdlib_printf[4], _d_, cell_size),
       _F_ = [0, caml_call2(Vdom[35], cst_width, _E_), _D_],
       _G_ = [0, [0, caml_call2(Vdom[35], cst_background_color, color), _F_]];
      return caml_call5(Vdom[51], 0, cst_td, 0, _G_, _r_);
     }
     var
      cells = caml_call2(Stdlib_list[10], width, _o_),
      _p_ = [0, caml_call2(Vdom[35], cst_padding$0, cst_0$1), 0],
      _q_ = [0, [0, caml_call2(Vdom[35], cst_margin$0, cst_0$2), _p_]];
     return caml_call5(Vdom[51], 0, cst_tr, 0, _q_, cells);
    }
    var
     rows = caml_call2(Stdlib_list[10], height, _f_),
     _g_ = [0, caml_call5(Vdom[51], 0, cst_tbody, 0, 0, rows), 0],
     _h_ = [0, caml_call2(Vdom[36], cst_tabindex, cst_0$3), 0];
    function _i_(e){
     var key_code = e[1], switch$0 = 0;
     if(48 <= key_code && 57 >= key_code){
      var key_number = key_code - 48 | 0;
      switch$0 = 1;
     }
     if(! switch$0) var key_number = 0;
     return [1, key_number];
    }
    var
     _j_ = [0, caml_call3(Vdom[25], 0, 0, _i_), _h_],
     _k_ = caml_call2(Stdlib_printf[4], _e_, width * 5 | 0),
     _l_ = [0, caml_call2(Vdom[35], cst_width$0, _k_), _j_],
     _m_ = [0, caml_call2(Vdom[35], cst_border_spacing, cst_0$4), _l_],
     _n_ =
       [0, [0, caml_call2(Vdom[35], cst_border_collapse, cst_collapse), _m_]];
    return caml_call5(Vdom[51], 0, cst_table, 0, _n_, _g_);
   }
   var Dune_exe_NcaView = [0, rgb_to_string, color_with_opacity, view];
   runtime.caml_register_global(46, Dune_exe_NcaView, "Dune__exe__NcaView");
   return;
  }
  (globalThis));

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLjAsImZpbGUiOiIubmNhU3BsZXRuaVZtZXNuaWsuZW9ianMvanNvby9kdW5lX19leGVfX05jYVZpZXcuY21vLmpzIiwic291cmNlUm9vdCI6IiIsIm5hbWVzIjpbInJnYl90b19zdHJpbmciLCJiIiwiZyIsInIiLCJjb2xvcl93aXRoX29wYWNpdHkiLCJhIiwiY29sb3IiLCJvcGFjaXR5IiwidmlldyIsIm1vZGVsIiwiZ3JpZCIsIndpZHRoIiwiaGVpZ2h0IiwiY2VsbF9zaXplIiwieSIsIngiLCJjZWxsIiwiY2VsbHMiLCJyb3dzIiwiZSIsImtleV9jb2RlIiwia2V5X251bWJlciJdLCJzb3VyY2VzIjpbIi93b3Jrc3BhY2Vfcm9vdC9zcmMvbmNhU3BsZXRuaVZtZXNuaWsvbmNhVmlldy5tbCJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7Rzs7Ozs7Rzs7Ozs7Rzs7Ozs7Rzs7Ozs7Rzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O1lBSUlBO1FBQXFCQyxjQUFIQyxjQUFIQztJQUNvRixPQUFBO29DQURwRkEsY0FBR0QsY0FBR0Q7O1lBSXJCRyxtQkFBbUJELEdBQUVELEdBQUVELEdBQUVJO0lBQzNCO0tBQUlDLFFBTEZOLGtCQUltQkcsR0FBRUQsR0FBRUQ7S0FFUCxNQUFBLHVCQUZTSTtLQUV2QkUsVUFBVTtJQUNkLFdBRklELE9BQ0FDO0dBQ1k7WUFHZEMsS0FBS0M7SUFDUDtLQUFJQyxPQUFPLG9DQURKRDtLQUVIRSxRQUFRLCtCQURSRDtLQUVBRSxTQUFTLCtCQUZURjtLQUdBRztpQkFFb0JDO2tCQUNhQztNQUMvQjtPQUFJQyxPQUFPLCtCQVBiTixNQU1pQ0ssR0FEYkQ7T0FHRixRQUFBLCtCQURaRTtPQUNPZjtPQUFIQztPQUFIQztPQUNERSxJQUFJLCtCQUZKVztPQUdtQixVQWpCM0JaLG1CQWVTRCxHQUFHRCxHQUFHRCxHQUNQSTtPQUNRRTtPQUFQRDs7T0FDTDswQkFVOEIsV0FmQ1MsR0FEYkQsR0FnQnVCO01BRmI7aUJBRXJCO2lCQURBO09BRHFCLE1BQUEsa0NBVGhCUDtpQkFTTDtpQkFEQTtpQkFEQTtpQkFEQTtpQkFEQTtPQURvQixNQUFBLGtDQVg3Qk07aUJBV1M7T0FEbUIsTUFBQSxrQ0FWNUJBO2lCQVVTO09BREYsY0FBRSwyQ0FGRlA7TUFDTCxPQUFBO0tBWUk7S0FqQk07TUFBUlcsUUFBUSw0QkFMWk47Z0JBMEJPO01BREYsY0FBRTtLQURQLE9BQUEsd0NBbkJJTTtJQXNCRztJQXZCVDtLQURFQyxPQUNGLDRCQUhFTjtLQTZDRixVQUFFLHlDQTNDQU07ZUF5Q0c7aUJBVm9CQztLQUNsQixJQUFJQyxXQURjRDtjQUNkQyxrQkFBQUE7VUFDQUMsYUFEQUQ7Ozt3QkFDQUM7S0FNSixXQU5JQTtJQU1lO0lBVEY7ZUFDbkI7S0FEbUIsTUFBQSxrQ0FqQ3RCVjtlQWlDRztlQURBO0tBREY7ZUFBRTtJQWVMLE9BQUE7R0FBeUI7OEJBMUR6QlgsZUFJQUksb0JBTUFJOzs7RSIsInNvdXJjZXNDb250ZW50IjpbIm9wZW4gRGVmaW5pY2lqZVxub3BlbiBOY2FNb2RlbFxuXG4oKiBDb252ZXJ0IFJHQiBjb2xvciB0byBhIHN0cmluZyAqKVxubGV0IHJnYl90b19zdHJpbmcgKHIsIGcsIGIpID1cbiAgUHJpbnRmLnNwcmludGYgXCJyZ2IoJWQsICVkLCAlZClcIiAoaW50X29mX2Zsb2F0IChyICouIDI1NS4pKSAoaW50X29mX2Zsb2F0IChnICouIDI1NS4pKSAoaW50X29mX2Zsb2F0IChiICouIDI1NS4pKVxuXG4oKiBDb252ZXJ0IFJHQiBhbmQgYWxwaGEgdG8gYSBzdHJpbmcgd2l0aCBjb25kaXRpb25hbCBvcGFjaXR5IGhhbmRsaW5nICopXG5sZXQgY29sb3Jfd2l0aF9vcGFjaXR5IHIgZyBiIGEgPVxuICBsZXQgY29sb3IgPSByZ2JfdG9fc3RyaW5nIChyLCBnLCBiKSBpblxuICBsZXQgb3BhY2l0eSA9IG1pbiAobWF4IGEgMC4wKSAxLjAgaW4gKCogRW5zdXJlIGFscGhhIGlzIHdpdGhpbiB0aGUgdmFsaWQgcmFuZ2UgWzAsIDFdICopXG4gIChjb2xvciwgb3BhY2l0eSlcblxuKCogVmlldyBmdW5jdGlvbiB0byByZW5kZXIgdGhlIGdyaWQgKilcbmxldCB2aWV3IG1vZGVsID1cbiAgbGV0IGdyaWQgPSBOY2FSdW5uZXIuZ2V0X2dyaWQgbW9kZWwuYXZ0b21hdCBpblxuICBsZXQgd2lkdGggPSBHcmlkLndpZHRoIGdyaWQgaW5cbiAgbGV0IGhlaWdodCA9IEdyaWQuaGVpZ2h0IGdyaWQgaW5cbiAgbGV0IGNlbGxfc2l6ZSA9IDUgaW5cbiAgbGV0IHJvd3MgPVxuICAgIExpc3QuaW5pdCBoZWlnaHQgKGZ1biB5IC0+XG4gICAgICBsZXQgY2VsbHMgPSBMaXN0LmluaXQgd2lkdGggKGZ1biB4IC0+XG4gICAgICAgIGxldCBjZWxsID0gR3JpZC5nZXRfY2VsbCBncmlkIHggeSBpblxuICAgICAgICBsZXQgKHIsIGcsIGIpID0gQ2VsbC5nZXRfcmdiIGNlbGwgaW5cbiAgICAgICAgbGV0IGEgPSBDZWxsLmdldF9hbHBoYSBjZWxsIGluXG4gICAgICAgIGxldCAoY29sb3IsIG9wYWNpdHkpID0gY29sb3Jfd2l0aF9vcGFjaXR5IHIgZyBiIGEgaW5cbiAgICAgICAgVmRvbS5lbHQgXCJ0ZFwiXG4gICAgICAgICAgfmE6WyBWZG9tLnN0eWxlIFwiYmFja2dyb3VuZC1jb2xvclwiIGNvbG9yO1xuICAgICAgICAgICAgICAgVmRvbS5zdHlsZSBcIndpZHRoXCIgKFByaW50Zi5zcHJpbnRmIFwiJWRweFwiIGNlbGxfc2l6ZSk7XG4gICAgICAgICAgICAgICBWZG9tLnN0eWxlIFwiaGVpZ2h0XCIgKFByaW50Zi5zcHJpbnRmIFwiJWRweFwiIGNlbGxfc2l6ZSk7XG4gICAgICAgICAgICAgICBWZG9tLnN0eWxlIFwiYm9yZGVyXCIgXCIxcHggc29saWQgI2NjY1wiO1xuICAgICAgICAgICAgICAgVmRvbS5zdHlsZSBcInBhZGRpbmdcIiBcIjBcIjsgKCogUmVtb3ZlIHBhZGRpbmcgKilcbiAgICAgICAgICAgICAgIFZkb20uc3R5bGUgXCJtYXJnaW5cIiBcIjBcIjsgICgqIFJlbW92ZSBtYXJnaW4gKilcbiAgICAgICAgICAgICAgIFZkb20uc3R5bGUgXCJib3gtc2l6aW5nXCIgXCJib3JkZXItYm94XCI7ICgqIEluY2x1ZGUgYm9yZGVyIGFuZCBwYWRkaW5nIGluIHRoZSBlbGVtZW50J3MgdG90YWwgd2lkdGggYW5kIGhlaWdodCAqKVxuICAgICAgICAgICAgICAgVmRvbS5zdHlsZSBcIm9wYWNpdHlcIiAoUHJpbnRmLnNwcmludGYgXCIlLjJmXCIgb3BhY2l0eSk7ICgqIEFwcGx5IG9wYWNpdHkgKilcbiAgICAgICAgICAgICAgIFZkb20uc3R5bGUgXCJjdXJzb3JcIiBcInBvaW50ZXJcIjsgKCogQ2hhbmdlIGN1cnNvciB0byBwb2ludGVyIG9uIGhvdmVyICopXG4gICAgICAgICAgICAgICBWZG9tLm9uY2xpY2sgKGZ1biBfIC0+IEtsaWsgKHgsIHkpKSAoKiBIYW5kbGUgY2xpY2sgZXZlbnQgKilcbiAgICAgICAgICAgICBdXG4gICAgICAgICAgW11cbiAgICAgICkgaW5cbiAgICAgIFZkb20uZWx0IFwidHJcIlxuICAgICAgICB+YTpbIFZkb20uc3R5bGUgXCJtYXJnaW5cIiBcIjBcIjsgKCogUmVtb3ZlIG1hcmdpbiAqKVxuICAgICAgICAgICAgIFZkb20uc3R5bGUgXCJwYWRkaW5nXCIgXCIwXCIgXSAoKiBSZW1vdmUgcGFkZGluZyAqKVxuICAgICAgICBjZWxsc1xuICAgIClcbiAgaW5cbiAgVmRvbS5lbHQgXCJ0YWJsZVwiXG4gICAgfmE6WyBWZG9tLnN0eWxlIFwiYm9yZGVyLWNvbGxhcHNlXCIgXCJjb2xsYXBzZVwiOyAoKiBFbnN1cmUgYm9yZGVycyBjb2xsYXBzZSAqKVxuICAgICAgICAgVmRvbS5zdHlsZSBcImJvcmRlci1zcGFjaW5nXCIgXCIwXCI7ICgqIFJlbW92ZSBzcGFjZSBiZXR3ZWVuIGNlbGxzICopXG4gICAgICAgICBWZG9tLnN0eWxlIFwid2lkdGhcIiAoUHJpbnRmLnNwcmludGYgXCIlZHB4XCIgKHdpZHRoICogY2VsbF9zaXplKSk7XG4gICAgICAgICBWZG9tLm9ua2V5ZG93biAoZnVuIGUgLT5cbiAgICAgICAgICAgbGV0IGtleV9jb2RlID0gZS53aGljaCBpblxuICAgICAgICAgICBsZXQga2V5X251bWJlciA9XG4gICAgICAgICAgICAgaWYga2V5X2NvZGUgPj0gNDggJiYga2V5X2NvZGUgPD0gNTcgdGhlbiAoKiBDaGVjayBpZiB0aGUga2V5IGlzIDAtOSAqKVxuICAgICAgICAgICAgICAga2V5X2NvZGUgLSA0OCAgKCogQ29udmVydCBrZXkgY29kZSB0byBpbnRlZ2VyICopXG4gICAgICAgICAgICAgZWxzZVxuICAgICAgICAgICAgICAgMCAgKCogRGVmYXVsdCB0byAwIGZvciBub24tZGlnaXQga2V5cyAqKVxuICAgICAgICAgICBpblxuICAgICAgICAgICBLZXlQcmVzcyBrZXlfbnVtYmVyICAoKiBTZW5kIEtleVByZXNzIG1lc3NhZ2UgKilcbiAgICAgICAgICk7XG4gICAgICAgICBWZG9tLmF0dHIgXCJ0YWJpbmRleFwiIFwiMFwiOyAoKiBNYWtlIHRoZSB0YWJsZSBmb2N1c2FibGUgKilcbiAgICAgICBdXG4gICAgWyBWZG9tLmVsdCBcInRib2R5XCIgcm93cyBdIl19
